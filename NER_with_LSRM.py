# -*- coding: utf-8 -*-
"""NER with RNN solved.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nmu9xuBoj9cSxl2Z1ILL9dNx-QIym-GG

<h2 align=center> Named Entity Recognition (NER) using LSTMs with Keras</h2>

### Task 1: Project Overview and Import Modules
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import joblib
np.random.seed(0)
plt.style.use("ggplot")

import tensorflow as tf
print('Tensorflow version:', tf.__version__)
print('GPU detected:', tf.config.list_physical_devices('GPU'))

"""### Task 2: Load and Explore the NER Dataset

*Essential info about tagged entities*:
- geo = Geographical Entity
- org = Organization
- per = Person
- gpe = Geopolitical Entity
- tim = Time indicator
- art = Artifact
- eve = Event
- nat = Natural Phenomenon
"""

data = pd.read_csv("../../data/ner_dataset.csv", encoding="latin1")
data = data.fillna(method="ffill")
data.head(20)

print("Unique sentences in corpus:", data['Sentence #'].nunique())
print("Unique words in corpus:", data['Word'].nunique())
print("Unique tags in corpus:", data['Tag'].nunique())

data['Tag'].unique()

data['Tag'].value_counts()

words = list(set(data["Word"].values))
words.append("ENDPAD")
num_words = len(words)

tags = list(set(data["Tag"].values))
num_tags = len(tags)

"""### Task 3: Retrieve Sentences and Corresponsing Tags"""

class SentenceGetter(object):
    def __init__(self, data):
        self.n_sent = 1
        self.data = data
        self.empty = False
        agg_func = lambda s: [(w, p, t) for w, p, t in zip(s["Word"].values.tolist(),
                                                           s["POS"].values.tolist(),
                                                           s["Tag"].values.tolist())]
        self.grouped = self.data.groupby("Sentence #").apply(agg_func)
        self.sentences = [s for s in self.grouped]

    def get_next(self):
        try:
            s = self.grouped["Sentence: {}".format(self.n_sent)]
            self.n_sent += 1
            return s
        except:
            return None

getter = SentenceGetter(data)
sentences = getter.sentences

sentences[0]

"""### Task 4: Define Mappings between Sentences and Tags"""

word2idx = {w: i + 1 for i, w in enumerate(words)}
tag2idx = {t: i for i, t in enumerate(tags)}

"""### Task 5: Padding Input Sentences and Creating Train/Test Splits"""

plt.hist([len(s) for s in sentences], bins=50)
plt.show()

from tensorflow.keras.preprocessing.sequence import pad_sequences

max_len = 50

X = [[word2idx[w[0]] for w in s] for s in sentences]
X = pad_sequences(maxlen=max_len, sequences=X, padding="post", value=num_words-1)

y = [[tag2idx[w[2]] for w in s] for s in sentences]
y = pad_sequences(maxlen=max_len, sequences=y, padding="post", value=tag2idx["O"])

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

"""### Task 6: Build and Compile a Bidirectional LSTM Model"""

from tensorflow.keras import Model, Input
from tensorflow.keras.layers import LSTM, Embedding, Dense
from tensorflow.keras.layers import TimeDistributed, SpatialDropout1D, Bidirectional

input_word = Input(shape=(max_len,))
model = Embedding(input_dim=num_words, output_dim=50, input_length=max_len)(input_word)
model = Bidirectional(LSTM(units=100, return_sequences=True, recurrent_dropout=0.1))(model)
out = TimeDistributed(Dense(num_tags, activation="softmax"))(model)
model = Model(input_word, out)
model.summary()

model.compile(optimizer="adam",
              loss="sparse_categorical_crossentropy",
              metrics=["accuracy"])

"""### Task 7: Train the Model"""

!pip install livelossplot

from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping
from livelossplot.tf_keras import PlotLossesCallback

# Commented out IPython magic to ensure Python compatibility.
# %%time
# 
# chkpt = ModelCheckpoint("model_weights.h5", monitor='val_loss',verbose=1, save_best_only=True, save_weights_only=True, mode='min')
# 
# early_stopping = EarlyStopping(monitor='val_accuracy', min_delta=0, patience=1, verbose=0, mode='max', baseline=None, restore_best_weights=False)
# 
# callbacks = [PlotLossesCallback(), chkpt, early_stopping]
# 
# history = model.fit(
#     x=x_train,
#     y=y_train,
#     validation_data=(x_test,y_test),
#     batch_size=32,
#     epochs=3,
#     callbacks=callbacks,
#     verbose=1
# )

"""## Export word2idx and tag2index"""

joblib.dump(word2idx, 'ner-files/word2idx.joblib', compress=9)
joblib.dump(tag2idx, 'ner-files/tag2idx.joblib', compress=9)

model.save("ner-files/ner-model")

"""### Task 8: Evaluate Named Entity Recognition Model"""

model.evaluate(x_test, y_test)

"""## Load trained model"""

import tensorflow as tf
import joblib

model = tf.keras.models.load_model("ner-files/ner-model/")
word2idx = joblib.load("ner-files/word2idx.joblib")
tag2idx = joblib.load("ner-files/tag2idx.joblib")

def predict(text):
    max_len = 50
    str_len = len(text.split())

    text = [[word2idx.get(w, 0) for w in text.split()]]
    text = pad_sequences(maxlen=max_len, sequences=text, padding="post", value=num_words-1)
    p = model.predict(np.array([text[0]]))

    p = np.argmax(p, axis=-1)
    print("{:15}\t {}\n".format("Word", "Pred"))
    print("-" *30)
    for i in range(str_len):
        print("{:15}\t{}".format(words[text[0][i]-1], tags[p[0][i]]))

#     for w, pred in zip(text[0], p[0]):
#         print("{:15}\t{}".format(words[w-1], tags[pred]))

predict("this is Cairo from Egypt")